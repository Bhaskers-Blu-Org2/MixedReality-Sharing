{
  "api/Microsoft.MixedReality.Sharing.Matchmaking.UdpPeerDiscoveryTransport.Options.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.UdpPeerDiscoveryTransport.Options.html",
    "title": "Class UdpPeerDiscoveryTransport.Options | MixedReality-Sharing Documentation",
    "keywords": "Class UdpPeerDiscoveryTransport.Options Options for a transport. Inheritance Object UdpPeerDiscoveryTransport.Options Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public class Options : object Fields | Improve this Doc View Source MaxRetries Declaration public int MaxRetries Field Value Type Description Int32 | Improve this Doc View Source MaxRetryDelayMs Declaration public int MaxRetryDelayMs Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoverySubscription.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoverySubscription.html",
    "title": "Interface IDiscoverySubscription | MixedReality-Sharing Documentation",
    "keywords": "Interface IDiscoverySubscription Handle to an ongoing discovery subscription. Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public interface IDiscoverySubscription : IDisposable Remarks A subscription is bound to the originating IDiscoveryAgent , but its methods/properties (including Dispose() ) must be safe to use independently from the state of the agent - even from a different thread from the one where the agent is used. After the agent is disposed, the result of Resources eventually becomes empty, and Updated stops being raised. Properties | Improve this Doc View Source Resources The list of discovered resources, ordered by IDiscoveryResource.UniqueId. Declaration IEnumerable<IDiscoveryResource> Resources { get; } Property Value Type Description IEnumerable < IDiscoveryResource > Events | Improve this Doc View Source Updated Event raised when the 'Resources' property will return an updated result. Declaration event Action<IDiscoverySubscription> Updated Event Type Type Description Action < IDiscoverySubscription >"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoveryAgent.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoveryAgent.html",
    "title": "Interface IDiscoveryAgent | MixedReality-Sharing Documentation",
    "keywords": "Interface IDiscoveryAgent Entry point for publishing and/or subscribing to matchmaking resources on the network. Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public interface IDiscoveryAgent : IDisposable Methods | Improve this Doc View Source PublishAsync(String, String, IReadOnlyDictionary<String, String>, CancellationToken) Publish a new resource. Declaration Task<IDiscoveryResource> PublishAsync(string category, string connection, IReadOnlyDictionary<string, string> attributes = null, CancellationToken token = null) Parameters Type Name Description String category String connection IReadOnlyDictionary < String , String > attributes Attributes to set on the new resource. CancellationToken token If cancellation is requested, the method should either complete the operation and return a valid resource, or roll back any changes to the system state and return a canceled Task. Returns Type Description Task < IDiscoveryResource > The newly created resource. | Improve this Doc View Source Subscribe(String) Start discovery of all resources whose category matches the one given. The returned result will change over time. Use the Updated event to subscribe to changes. The subscription will update indefinitely until disposed. Declaration IDiscoverySubscription Subscribe(string category) Parameters Type Name Description String category Returns Type Description IDiscoverySubscription"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.MemoryPeerDiscoveryTransport.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.MemoryPeerDiscoveryTransport.html",
    "title": "Class MemoryPeerDiscoveryTransport | MixedReality-Sharing Documentation",
    "keywords": "Class MemoryPeerDiscoveryTransport Inheritance Object MemoryPeerDiscoveryTransport Implements IPeerDiscoveryTransport Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public class MemoryPeerDiscoveryTransport : object, IPeerDiscoveryTransport Constructors | Improve this Doc View Source MemoryPeerDiscoveryTransport(Int32) Creates a transport on the specific \"port\" (broadcast group). Declaration public MemoryPeerDiscoveryTransport(int port) Parameters Type Name Description Int32 port Methods | Improve this Doc View Source Broadcast(Guid, ArraySegment<Byte>) Declaration public void Broadcast(Guid streamId, ArraySegment<byte> message) Parameters Type Name Description Guid streamId ArraySegment < Byte > message | Improve this Doc View Source PumpMessages() Declaration protected static void PumpMessages() | Improve this Doc View Source PumpMessagesInternal() Declaration protected static void PumpMessagesInternal() | Improve this Doc View Source Reply(IPeerDiscoveryMessage, Guid, ArraySegment<Byte>) Declaration public void Reply(IPeerDiscoveryMessage req, Guid streamId, ArraySegment<byte> message) Parameters Type Name Description IPeerDiscoveryMessage req Guid streamId ArraySegment < Byte > message | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Stop() Declaration public void Stop() Events | Improve this Doc View Source Message Declaration public event Action<IPeerDiscoveryTransport, IPeerDiscoveryMessage> Message Event Type Type Description Action < IPeerDiscoveryTransport , IPeerDiscoveryMessage > Implements IPeerDiscoveryTransport"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.IPeerDiscoveryMessage.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.IPeerDiscoveryMessage.html",
    "title": "Interface IPeerDiscoveryMessage | MixedReality-Sharing Documentation",
    "keywords": "Interface IPeerDiscoveryMessage Interface for IPeerDiscoveryTransport messages. Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public interface IPeerDiscoveryMessage Remarks Only implementations of IPeerDiscoveryTransport should implement this interface. Properties | Improve this Doc View Source Contents Message payload. Declaration ArraySegment<byte> Contents { get; } Property Value Type Description ArraySegment < Byte > | Improve this Doc View Source StreamId Stream that the packet belongs to. See Broadcast(Guid, ArraySegment<Byte>) . Declaration Guid StreamId { get; } Property Value Type Description Guid"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoveryResourceEditor.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoveryResourceEditor.html",
    "title": "Interface IDiscoveryResourceEditor | MixedReality-Sharing Documentation",
    "keywords": "Interface IDiscoveryResourceEditor Interface to edit a resource. Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public interface IDiscoveryResourceEditor Methods | Improve this Doc View Source CommitAsync() Try to commit the edits made through this interface. Declaration Task CommitAsync() Returns Type Description Task | Improve this Doc View Source PutAttribute(String, String) Add or replace a key value pair to the attributes. Declaration void PutAttribute(string key, string value) Parameters Type Name Description String key String value | Improve this Doc View Source RemoveAttribute(String) Remove the attribute with the given key. Declaration void RemoveAttribute(string key) Parameters Type Name Description String key"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.PeerDiscoveryAgent.Options.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.PeerDiscoveryAgent.Options.html",
    "title": "Class PeerDiscoveryAgent.Options | MixedReality-Sharing Documentation",
    "keywords": "Class PeerDiscoveryAgent.Options Inheritance Object PeerDiscoveryAgent.Options Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public class Options : object Fields | Improve this Doc View Source ResourceExpirySec Declaration public int ResourceExpirySec Field Value Type Description Int32"
  },
  "libs/Matchmaking/docs/index.html": {
    "href": "libs/Matchmaking/docs/index.html",
    "title": "MixedReality-Sharing Matchmaking 0.0.1 | MixedReality-Sharing Documentation",
    "keywords": "The Matchmaking library automates the process of discovering and joining MR experiences over the network. Matchmaking is a C# .NET Standard 2.0 library. It is available as a NuGet package . Alternatively, the Microsoft.MixedReality.Sharing.Matchmaking project can be added to a Visual Studio solution and built from source. Currently the library contains a simple system to publish and discover arbitrary resources (application users, shared experiences, or others) on a local network using UDP. Check the project roadmap for planned features. Resource discovery Matchmaking defines a resource as an application-specific entity available on the network. Application clients looking for shared experiences can be resources, as well as hosting servers or individual sessions of a shared experience. A resource has: a connection string : an application-defined string that indicates how to connect to the resource. This can be an URL, an IP address-port pair, or any string that can be interpreted by the network transport used by the application to start a communication with the resource. a category string : an application-defined string that indicates the type of the resource. This can be used to distinguish between resources published by different applications or between different types of resources within the same application (e.g. users vs shared sessions). a set of optional attributes , application-defined key-value pairs. These can be used to expose room properties or capabilities to the discovery system. IDiscoveryAgent is the main entry point of the discovery system. Through an agent you can: publish resources on the network for other application processes to discover: IDiscoveryAgent agent = InitDiscoveryAgent(); var cts = new CancellationTokenSource(); string category = \"myapp/session\"; string connection = \"http://myappserver.org/session42\"; var attributes = new Dictionary<string, string>{ [\"environment\"] = \"house\" }; IDiscoveryResource newSession = await agent.PublishAsync(category, connection, attributes, cts.Token); subscribe to resources published by other application processes: string category = \"myapp/session\"; IDiscoverySubscription sessionSubscription = agent.Subscribe(category); IDiscoveryResource foundSession = null; sessionSubscription.Updated += subscription => { foreach (IDiscoveryResource res in sessionSubscription.Resources) { if (res.Attributes[\"environment\"] == \"house\") { Console.WriteLine(\"Discovered session at \" + res.Connection); foundSession = res; // Unsubscribe from further updates. sessionSubscription.Dispose(); } } }; The IDiscoveryResource interface gives read access to resources published and discovered. In general, the publisher of a resource can edit its attribute after publishing by calling IDiscoveryResource.RequestEdit and using the obtained IDiscoveryResourceEditor . IDiscoveryAgent.Dispose() stops advertising resources and terminates any active subscriptions. See the P2PChat demo for a usage example. Peer-to-peer discovery agent The discovery API is generic and can be implemented on top of a variety of protocols/network transports. The Matchmaking library contains a simple implementation, useful for prototypes/demos where all the participant devices are joined to the same local network or multicast group. PeerDiscoveryAgent implements IDiscoveryAgent using a simple peer-to-peer protocol loosely based on SSDP . When an agent publishes a resource, it starts periodically broadcasting announcement messages announcing its availability and attributes. When an agent subscribes to a category, it broadcasts a query message to which publishers reply with the current active resources, and starts listening for periodic announcements. Every announcement contains the resource lifetime in seconds - agents will consider a resource expired after an interval equal to its lifetime has passed from the last announcement about the resource. Messages are exchanged between agents using a IPeerDiscoveryTransport specified on agent creation: var transport = new UdpPeerDiscoveryTransport(IPAddress.Broadcast, 45278); var agent = new PeerDiscoveryAgent(transport); IPeerDiscoveryTransport is a simple convenience interface to send and receive broadcast messages among peers. The library contains an implementation that exchanges messages through UDP broadcast/multicast ( UdpPeerDiscoveryTransport ) plus a memory-based, in-process one for testing ( MemoryPeerDiscoveryTransport ). Limitations PeerDiscoveryAgent is meant to be used in small-size prototypes and is not recommended in production application that expect to handle many concurrent agents/resources. Importantly, the implementation assumes a trusted network and it is not suitable to applications that might deal with malicious network traffic. UdpPeerDiscoveryTransport sends one UDP packet per resource announcement, including all the resource data - category, connection, attributes. Depending on the network configuration, UDP packets bigger than a certain size might be fragmented - increasing packet loss and decreasing performance - or dropped by the network stack. The implementation will therefore work reliably only if the total data for each resource is low - generally under 1KB."
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | MixedReality-Sharing Documentation",
    "keywords": "TODO nuget feed etc"
  },
  "index.html": {
    "href": "index.html",
    "title": "Index | MixedReality-Sharing Documentation",
    "keywords": "MixedReality-Sharing 0.1 Note : The documentation writing is in progress . Some links are not active when the associated page is not available yet. User Manual MixedReality-Sharing is a cross-platform solution to enable rich multiuser experiences. Getting started Installation Building from sources Matchmaking API reference Matchmaking C# library IDiscoveryResource Information about a matchmaking resource advertised on the network. IDiscoveryAgent Entry point for publishing and/or subscribing to matchmaking resources on the network."
  },
  "manual/roadmap.html": {
    "href": "manual/roadmap.html",
    "title": "Roadmap | MixedReality-Sharing Documentation",
    "keywords": "Project Goal The goal of MixedReality-Sharing is to provide a set cross-platform networking libraries which provide a solid foundation for rich multi-user experiences. Concretely, this covers everything from discovering peers, establishing connections and exchanging messages with them. We do this via the following independent packages Discovery - Decide who is included in the experience Audio/Video/Data streams - Exchange media and data Spatial Alignment - Establish a shared frame of reference Synchronization - High level state synchronization Milestones Milestones are only roughly in expected chronological order. Audio/Video/Data (Shipped October 2019) Goal: Ship a networking solution which supports audio/video/data. Our solution is based on WebRTC. MixedReality-WebRTC 1.0.0 comes support for C#/C++, Desktop/UWP, ARM/x86/x64. https://github.com/microsoft/MixedReality-WebRTC/releases/tag/v1.0.0 This adds support for WebRTC on windows platforms. Developers can be sure that our devices have good support. E.g. Hardware video encode/decode, integration with unusual devices such as mixed reality capture (mixed camera and rendered content) as as video source. Developers still need to supply their own signalling solution (before opening a WebRTC connection, some out-of-band messages must be exchanged configure media types and perform NAT punchthrough) Network Autoconfiguration Goal: Provide a mechanism for automatic configuration. Remove the need for explicit IP addresses. This milestone adds v0.0.1 of Matchmaking discovery mechanism which allows simple network autoconfiguration. This initial implementation works via UDP broadcast. In other words, all devices must be on the same subnet. Future versions will lift this restriction. This release will be used as an integration test in a branch of SpectatorView . As well as the portable C# implementation, there will be some Unity specific UI components for things such as choosing a session if there are several available. Spatial Alignment Goal: Simplify establishing a shared reference frame. To create holograms which can be viewed from multiple devices, they must know their positions relative to one or more fixed points (spatial anchors). With this milestone, applications can easily create content which is firmly anchored to the real world. Several swappable backends are available. QR code can be used for an initial demo/disconnected operation. There is a natural migration path to richer services such as Azure Spatial Anchors The implementation is extracted and refined from SpectatorView . Naturally, SpectatorView will be the first consumer of the new API. WebRTC Signalling Goal: Provide an integrated WebRTC signalling service. Remove the need for an external solution. WebRTC provides a lot of value. But the need to implement signalling can be an obstacle. With this milestone, a developer can easily get multiple devices connected, without the requirement to run a server. Matchmaking Transport Goal: Make Matchmaking work without requiring devices to be on the same subnet. Provide a service and client libraries to allow discovery based on something other than the (somewhat arbitrary) network connection."
  },
  "manual/building.html": {
    "href": "manual/building.html",
    "title": "Building from Source | MixedReality-Sharing Documentation",
    "keywords": "For convenience, we supply prebuilt nuget packages , but the packages can also be built from source if needed. The MixedReality-Sharing libraries are built from the Microsoft.MixedReality.Sharing.sln Visual Studio solution located at the root of the repository. The solution may contain more projects than are produced by official packages. Prerequisites The solution uses Visual Studio 2019 with the following features: The MSVC v142 - VS 2019 C++ x64/x86 build tools toolchain is required to build any of the C++ libraries. This is installed by default with the Desktop development with C++ workload on Visual Studio 2019. For ARM support, the MSVC v142 - VS 2019 C++ ARM build tools toolchain is also required. The C# library requires a .NET Standard 2.0 compiler, like the Roslyn compiler available as part of Visual Studio when installing the .NET desktop development workload. The UWP libraries and projects require UWP support from the compiler, available as part of Visual Studio when installing the Universal Windows Platform development workload. Cloning the Repository The official repository containing the source code of MixedReality-Sharing is https://github.com/microsoft/MixedReality-Sharing . Development is done on the master branch. git clone https://github.com/microsoft/MixedReality-Sharing Building the Libraries Open the Microsoft.MixedReality.Sharing.sln Visual Studio solution located at the root of the freshly cloned repository. Choose the Platform and Configuration Then Either: Build the entire solution with F7 or Build > Build Solution Select individual project(s) to build On successful build, the binaries will be generated in <root>/build/bin/<Configuration>/<Platform>"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.html",
    "title": "Namespace Microsoft.MixedReality.Sharing.Matchmaking | MixedReality-Sharing Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Sharing.Matchmaking Classes MemoryPeerDiscoveryTransport PeerDiscoveryAgent Simple discovery agent with pluggable network transport. PeerDiscoveryAgent.Options UdpPeerDiscoveryTransport This class implements transport on UDP broadcast or multicast. UDP is inherently an unreliable protocol. Reliability decreases exponentially when the packet becomes large enough to be fragmented (often around 1400 bytes, but sometimes smaller). Thus this transport is best used for small packet sizes. UdpPeerDiscoveryTransport.Options Options for a transport. Interfaces IDiscoveryAgent Entry point for publishing and/or subscribing to matchmaking resources on the network. IDiscoveryResource Information about a matchmaking resource advertised on the network. Use PublishAsync(String, String, IReadOnlyDictionary<String, String>, CancellationToken) to publish a new resource. Use Subscribe(String) to discover resources. IDiscoveryResourceEditor Interface to edit a resource. IDiscoverySubscription Handle to an ongoing discovery subscription. IPeerDiscoveryMessage Interface for IPeerDiscoveryTransport messages. IPeerDiscoveryTransport Transport layer abstraction for PeerDiscoveryAgent. Implement this interface to use peer discovery over a different transport layer."
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.IPeerDiscoveryTransport.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.IPeerDiscoveryTransport.html",
    "title": "Interface IPeerDiscoveryTransport | MixedReality-Sharing Documentation",
    "keywords": "Interface IPeerDiscoveryTransport Transport layer abstraction for PeerDiscoveryAgent. Implement this interface to use peer discovery over a different transport layer. Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public interface IPeerDiscoveryTransport Methods | Improve this Doc View Source Broadcast(Guid, ArraySegment<Byte>) Send a message to all others in this transport. Declaration void Broadcast(Guid streamId, ArraySegment<byte> message) Parameters Type Name Description Guid streamId Associates the message to a stream. Messages from the same stream will be delivered in order. No guarantees are made on messages from different stream. can be used for messages that do not need ordering. ArraySegment < Byte > message The buffer containing the message to send Remarks Must be thread-safe with respect to other calls to the same method and Reply(IPeerDiscoveryMessage, Guid, ArraySegment<Byte>) . | Improve this Doc View Source Reply(IPeerDiscoveryMessage, Guid, ArraySegment<Byte>) Reply to a message (typically a broadcast message). Must be thread-safe. Declaration void Reply(IPeerDiscoveryMessage inResponseTo, Guid streamId, ArraySegment<byte> message) Parameters Type Name Description IPeerDiscoveryMessage inResponseTo Guid streamId Associates the message to a stream. Messages from the same stream will be delivered in order. No guarantees are made on messages from different stream. can be used for messages that do not need ordering. ArraySegment < Byte > message The buffer containing the message to send Remarks Must be thread-safe with respect to other calls to the same method and Broadcast(Guid, ArraySegment<Byte>) . | Improve this Doc View Source Start() Start the transport. Declaration void Start() | Improve this Doc View Source Stop() Stop the transport Declaration void Stop() Events | Improve this Doc View Source Message Raised when a message arrives on this transport. Declaration event Action<IPeerDiscoveryTransport, IPeerDiscoveryMessage> Message Event Type Type Description Action < IPeerDiscoveryTransport , IPeerDiscoveryMessage >"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.UdpPeerDiscoveryTransport.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.UdpPeerDiscoveryTransport.html",
    "title": "Class UdpPeerDiscoveryTransport | MixedReality-Sharing Documentation",
    "keywords": "Class UdpPeerDiscoveryTransport This class implements transport on UDP broadcast or multicast. UDP is inherently an unreliable protocol. Reliability decreases exponentially when the packet becomes large enough to be fragmented (often around 1400 bytes, but sometimes smaller). Thus this transport is best used for small packet sizes. Inheritance Object UdpPeerDiscoveryTransport Implements IPeerDiscoveryTransport Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public class UdpPeerDiscoveryTransport : object, IPeerDiscoveryTransport Constructors | Improve this Doc View Source UdpPeerDiscoveryTransport(IPAddress, UInt16, IPAddress, UdpPeerDiscoveryTransport.Options) Create a new transport. Declaration public UdpPeerDiscoveryTransport(IPAddress broadcast, ushort port, IPAddress local = null, UdpPeerDiscoveryTransport.Options options = null) Parameters Type Name Description IPAddress broadcast Broadcast or multicast address used to send packets to other hosts. UInt16 port Port used to send and receive broadcast packets. IPAddress local Local address. UdpPeerDiscoveryTransport.Options options Methods | Improve this Doc View Source Broadcast(Guid, ArraySegment<Byte>) Declaration public void Broadcast(Guid guid, ArraySegment<byte> message) Parameters Type Name Description Guid guid ArraySegment < Byte > message | Improve this Doc View Source Reply(IPeerDiscoveryMessage, Guid, ArraySegment<Byte>) Declaration public void Reply(IPeerDiscoveryMessage req, Guid guid, ArraySegment<byte> message) Parameters Type Name Description IPeerDiscoveryMessage req Guid guid ArraySegment < Byte > message | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Stop() Declaration public void Stop() Events | Improve this Doc View Source Message A new message has been received. Declaration public event Action<IPeerDiscoveryTransport, IPeerDiscoveryMessage> Message Event Type Type Description Action < IPeerDiscoveryTransport , IPeerDiscoveryMessage > | Improve this Doc View Source Started The transport has started listening for messages. Called on Start() ; Declaration public event Action<IPeerDiscoveryTransport> Started Event Type Type Description Action < IPeerDiscoveryTransport > | Improve this Doc View Source Stopped The transport has stopped listening for messages. Called on Stop() ; Declaration public event Action<IPeerDiscoveryTransport> Stopped Event Type Type Description Action < IPeerDiscoveryTransport > Implements IPeerDiscoveryTransport"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.PeerDiscoveryAgent.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.PeerDiscoveryAgent.html",
    "title": "Class PeerDiscoveryAgent | MixedReality-Sharing Documentation",
    "keywords": "Class PeerDiscoveryAgent Simple discovery agent with pluggable network transport. Inheritance Object PeerDiscoveryAgent Implements IDiscoveryAgent IDisposable Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public class PeerDiscoveryAgent : object, IDiscoveryAgent, IDisposable Constructors | Improve this Doc View Source PeerDiscoveryAgent(IPeerDiscoveryTransport, PeerDiscoveryAgent.Options) Declaration public PeerDiscoveryAgent(IPeerDiscoveryTransport transport, PeerDiscoveryAgent.Options options = null) Parameters Type Name Description IPeerDiscoveryTransport transport PeerDiscoveryAgent.Options options Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source PublishAsync(String, String, IReadOnlyDictionary<String, String>, CancellationToken) Declaration public Task<IDiscoveryResource> PublishAsync(string category, string connection, IReadOnlyDictionary<string, string> attributes = null, CancellationToken token = null) Parameters Type Name Description String category String connection IReadOnlyDictionary < String , String > attributes CancellationToken token Returns Type Description Task < IDiscoveryResource > | Improve this Doc View Source Subscribe(String) Declaration public IDiscoverySubscription Subscribe(string category) Parameters Type Name Description String category Returns Type Description IDiscoverySubscription Implements IDiscoveryAgent IDisposable"
  },
  "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoveryResource.html": {
    "href": "api/Microsoft.MixedReality.Sharing.Matchmaking.IDiscoveryResource.html",
    "title": "Interface IDiscoveryResource | MixedReality-Sharing Documentation",
    "keywords": "Interface IDiscoveryResource Information about a matchmaking resource advertised on the network. Use PublishAsync(String, String, IReadOnlyDictionary<String, String>, CancellationToken) to publish a new resource. Use Subscribe(String) to discover resources. Namespace : Microsoft.MixedReality.Sharing.Matchmaking Assembly : Microsoft.MixedReality.Sharing.Matchmaking.dll Syntax public interface IDiscoveryResource Properties | Improve this Doc View Source Attributes Dictionary used to store data associated with the resource, which can be used to filter and query resources, and to store data which can be retrieved by any participant. Declaration IReadOnlyDictionary<string, string> Attributes { get; } Property Value Type Description IReadOnlyDictionary < String , String > | Improve this Doc View Source Category The category of the resource. This is an application-defined URI. A common choice would be the fully qualified name of the application. Declaration string Category { get; } Property Value Type Description String | Improve this Doc View Source Connection An application specific string which can be used to connect to this resource. Declaration string Connection { get; } Property Value Type Description String | Improve this Doc View Source UniqueId A unique identifier for both this resource and its publisher. A new Guid is automatically created in each call to PublishAsync. Declaration Guid UniqueId { get; } Property Value Type Description Guid Methods | Improve this Doc View Source RequestEdit() If the backend allows it, return an interface to edit this resource. Otherwise return null. For many implementations, only the resource creator may edit. Declaration IDiscoveryResourceEditor RequestEdit() Returns Type Description IDiscoveryResourceEditor"
  }
}